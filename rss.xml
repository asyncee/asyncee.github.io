<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Asyncee</title><link>https://asyncee.github.io/</link><description>Stanislav Lobanov</description><atom:link href="https://asyncee.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>ru</language><lastBuildDate>Thu, 11 Oct 2018 15:18:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Service Discovery вместе с Consul</title><link>https://asyncee.github.io/posts/service-discovery-vmeste-s-consul/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;С ростом популярности микросервисов количество backend-компонентов растёт, иногда в геометрической прогрессии, особенно когда одному микросервису нужна своя база данных, кэш-сервер и т.д. Когда инфраструктуры становится много, возникают новые проблемы, которые тоже приходится решать. Одной из таких проблем является деплой и конфигурация.&lt;/p&gt;
&lt;p&gt;Подходов к решению этой проблемы существует множество, одним из них является использование service discovery на основе Consul.&lt;/p&gt;
&lt;p&gt;Consul - децентрализованная отказоустойчивая система, позволяющая сервисам находить друг друга в сети. Кроме service discovery в Consul есть health checks, kv store, locks и несколько утилит, чтобы всё это максимально эффективно использовать.&lt;/p&gt;
&lt;p&gt;Тем, кто не знаком, советую сходить на &lt;a href="https://www.consul.io"&gt;официальный сайт&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;С точки зрения инфраструктуры Consul состоит из агента и сервера. По сути, это один бинарник, запущенный в разных режимах. Для защиты от splitbrain рекомендуется сервер запускать в количестве 3-5 инстансов.&lt;/p&gt;
&lt;p&gt;Агенты же ставятся на каждую ноду с сервисом (например, в openvz контейнер). Таким образом, каждый сервис работает только с локальным агентом, располагающимся на порту 8500.&lt;/p&gt;
&lt;p&gt;Консистентность обеспечивается за счёт того, что серверы общаются между собой по протоколу Raft, а клиенты — Gossip. В один конкретный момент времени есть только один Leader server, который принимает все запросы на запись и распространяет эту информацию по остальной сети. Вся остальная сеть, соответственно работает на чтение. Как очевидно, используется eventual consistency.&lt;/p&gt;
&lt;h2&gt;Что умеет Consul&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Service discovery&lt;/strong&gt; — сервисы регистрируются в каталоге и могут запрашивать информацию о расположении друг друга в сети.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Health checks&lt;/strong&gt; — консул умеет получать информацию о состоянии сервисов c помощью http запросов, скриптов, tcp-соединения на порт, TTL. Так же поддерживаются проверки для gRPC сервисов и приложений внутри Docker контейнеров. При этом балансировка нагрузки будет производиться только на здоровые ноды.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kv store&lt;/strong&gt; — простое хранилище типа ключ-значение. Можно использовать, чтобы хранить конфигурацию, данные для координации сервисов между собой, и тд.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sessions&lt;/strong&gt; — механизм сессий позволяет реализовать локи и семафоры для сервисов. Подробнее в документации: &lt;a href="https://www.consul.io/docs/internals/sessions.html"&gt;сессии&lt;/a&gt; и &lt;a href="https://www.consul.io/docs/guides/semaphore.html"&gt;семафоры&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web ui&lt;/strong&gt; — так как консул сравнивают со швейцарским ножом, логично было бы предположить, что у него есть классный UI. По-умолчанию, доступен по адресу &lt;code&gt;http://localhost:8500/ui&lt;/code&gt; (в dev окружении). Смотрите &lt;a href="https://demo.consul.io/ui/dc1/services"&gt;официальное live demo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Для чего можно использовать&lt;/h2&gt;
&lt;h3&gt;Service discovery с health checks&lt;/h3&gt;
&lt;p&gt;Собственно основная задача (для меня) - это service discrovery. Сюда же относится автоматическая балансировка запросов на живые ноды. Жизненный цикл сервиса выглядит так:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Приложение регистрируется в каталоге, сообщая своё имя и порт. &lt;/li&gt;
&lt;li&gt;С помощью health checks производится проверка, что приложение работоспособно.&lt;/li&gt;
&lt;li&gt;Если приложение остановилось или упало, консул перестаёт балансировать на него нагрузку. В этот момент нода помечается как проблемная. По истечении определённого таймаута регистрация приложения удаляется. Актуальную информацию о проблемных нодах и их статусе, можно посмотреть в веб-интерфейсе.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Получить адрес и порт нужного сервиса клиенты могут с помощью HTTP Api или DNS запросов (консул поднимает свой DNS сервер на порту 8600).
Как использовать http api можно прочитать &lt;a href="https://www.consul.io/api/health.html#list-nodes-for-service"&gt;здесь&lt;/a&gt;, а про DNS &lt;a href="https://www.consul.io/docs/agent/dns.html"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Централизованное управление конфигурацией&lt;/h3&gt;
&lt;p&gt;Благодаря своему KV-store, Консул может выступать в роли центрального хранилища конфигурации для приложений. Работать это может двумя способами:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Если приложение конфигурируется через переменные окружения, то можно использовать утилиту &lt;strong&gt;envconsul&lt;/strong&gt;, которая будет трансформировать ключи из KV хранилища в environment variables и запускать новый сервис. Это удобно тем, что при изменении конфигурации через consul ui, envconsul автоматически перезапустит нужный сервис.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Приложение может само ходить в консул и брать нужные настройки оттуда. Это может быть удобно для изменения поведения приложения в рантайме, например, с помощью feature-flags.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Конечно, можно смешивать оба подхода для получения большего профита.&lt;/p&gt;
&lt;h3&gt;Балансировка нагрузки между сервисами&lt;/h3&gt;
&lt;p&gt;Консул автоматически балансирует нагрузку только на живые ноды. Здесь же затрону момент, когда необходим реверс-прокси.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nginx. Для балансировки через nginx приходится прописывать апстримы в конфиг-файле. Чтобы не делать этого вручную можно использовать утилиту &lt;strong&gt;consul-template&lt;/strong&gt;, которая по шаблону сгенерирует конфигурационный файл (автоматически при старте и изменении статуса нод) с нужными хостами и портами и перезагрузит nginx.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Для максимально ленивых есть &lt;a href="https://github.com/fabiolb/fabio"&gt;&lt;strong&gt;fabio&lt;/strong&gt;&lt;/a&gt; — load balancer для consul. Он умеет маршрутизировать запросы на живые ноды вообще без какой-либо конфигурации, автоматически. Всё, что нужно сделать, это добавить специальный тег для нужного сервиса, вот такого вида: &lt;code&gt;urlprefix-mysite.com/&lt;/code&gt;. Помеченные таким тегом сервисы будут получать все запросы для &lt;code&gt;mysite.com/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Кроме HTTP, fabio умеет балансировать и TCP соединения.&lt;/p&gt;
&lt;p&gt;Также можно балансировать нагрузку между сервисами в &lt;em&gt;различных датацентрах&lt;/em&gt; (geo failover), подробнее &lt;a href="https://www.consul.io/docs/guides/geo-failover.html"&gt;по ссылке&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Локи&lt;/h3&gt;
&lt;p&gt;Благодаря локам, можно запускать N сервисов в один момент времени.&lt;/p&gt;
&lt;p&gt;Например, у нас есть некий распределённый крон, который находится на 10 нодах. В этом кроне есть задача, которая должна работать в единственном числе один момент времени. Такое ограничение достаточно легко реализовать с помощью локов (&lt;a href="https://www.consul.io/docs/commands/lock.html"&gt;подробнее в документации&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Вот пример, как запустить ровно один редис:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;consul lock service/redis/lock redis-server
&lt;/pre&gt;


&lt;p&gt;Как только редис крашнется, автоматически запустится инстанс на другой ноде.&lt;/p&gt;
&lt;p&gt;Отдельным плюсом является то, что &lt;strong&gt;это не требует конфигурации&lt;/strong&gt;, что на порядок упрощает деплой и вообще снижает когнитивную нагрузку.&lt;/p&gt;
&lt;h3&gt;Регистрация внешних сервисов&lt;/h3&gt;
&lt;p&gt;В экосистеме, построенной на Consul можно регистрировать и внешние сервисы, например, базу данных.&lt;/p&gt;
&lt;p&gt;В качестве примера: есть два окружения — development и production. Сервисы в обоих этих окружениях зависят от одного и того же внешнего сервиса — базы данных, доступной по адресу &lt;code&gt;database.service.consul&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Соответственно, всё что нужно, это зарегистрировать нашу базу данных таким образом:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Development&lt;/span&gt;
curl -X PUT -d &lt;span class="s1"&gt;'{"name": "database", "port": 5432}'&lt;/span&gt; http://localhost:8500/v1/agent/service/register

&lt;span class="c1"&gt;# Production&lt;/span&gt;
curl -X PUT -d &lt;span class="s1"&gt;'{"name": "database", address: "db.production.com"}'&lt;/span&gt; http://localhost:8500/v1/agent/service/register
&lt;/pre&gt;


&lt;p&gt;Как видно, в production окружении регистрируется база данных по адресу &lt;code&gt;db.production.com&lt;/code&gt;. Кстати, чтобы резолвить подобные адреса, необходимо консул настроить с параметром &lt;a href="https://www.consul.io/docs/agent/options.html#_recursor"&gt;recursors&lt;/a&gt;: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;"recursors": ["8.8.8.8"]
&lt;/pre&gt;


&lt;h2&gt;Итого&lt;/h2&gt;
&lt;p&gt;На мой взгляд, Consul на текущий момент это самая продвинутая и интерсная система, которая помогает уменьшить сложность деплоя, конфигурации и прочих инфраструктурных моментов.&lt;/p&gt;
&lt;p&gt;В следующей статье приведу примеры Python кода и покажу, как использовать service discovery и kv store.&lt;/p&gt;
&lt;p&gt;Вдохновение для статьи черпал отсюда:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.consul.io/intro/getting-started/install.html"&gt;Официальная документация&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XZZDVUCCilM"&gt;Consul Infrastructure Recipes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/service-discovery-vmeste-s-consul/</guid><pubDate>Thu, 11 Oct 2018 15:16:22 GMT</pubDate></item><item><title>Блог переехал на Nikola</title><link>https://asyncee.github.io/posts/moved-to-nikola/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;Всем привет!&lt;/p&gt;
&lt;p&gt;Наконец-то блог переехал на Nikola, генератор сайтов на Python.&lt;/p&gt;
&lt;p&gt;Год назад у меня полностью сменилось рабочее окружение, переехал на Mac.
Ставить руби не хотелось, да и заново вспоминать и разбираться с Jekyll
в общем-то тоже, поэтому никак не мог собраться снова начать писать,
хотя идей было море.&lt;/p&gt;
&lt;p&gt;Рад, что выдалось несколько свободных часов и я всё-таки взял себя в руки
и мигрировал блог. Скажу откровенно — Nikola меня поразил. Я вообще расчитывал,
что миграция займёт неделю, если этим заниматься по вечерам. Однако,
как оказалось, у него очень большие возможности, поддержка плагинов,
сторонних тем, богатый command-line инструментарий. А самое главное — мои
старые посты в Markdown формате он съел практически в оригинальном виде.&lt;/p&gt;
&lt;p&gt;После миграции постов, я настроил редиректы со старых адресов,
установил тему Hyde, немного допилил её напильником и, вуаля — всё готово!&lt;/p&gt;
&lt;p&gt;Отдельно порадовало то, что для настройки деплоя на Github не понадобилось
вообще ничего настраивать.&lt;/p&gt;
&lt;p&gt;Как обычно, оставляю ссылку: &lt;a href="https://getnikola.com"&gt;https://getnikola.com&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/moved-to-nikola/</guid><pubDate>Sun, 30 Sep 2018 13:52:00 GMT</pubDate></item><item><title>Продвинутые запросы в Django: сортировка событий по дате</title><link>https://asyncee.github.io/posts/advanced-django-querying-sorting-events-by-date/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;Представьте ситуацию, в которой в нашем приложении были бы события (запланированные задачи, встречи, Python−конференции по всему миру), происходящие в разные моменты времени. Мы хотели бы отображать их пользователю в виде простого списка. Учитывая, что мы в Феврале 2017 года, какой способ сортировки событий был бы лучшим с точки зрения пользователя?&lt;/p&gt;
&lt;p&gt;&lt;img alt="хронологический порядок событий" src="https://asyncee.github.io/public/posts/advanced-django-querying/chronological.png"&gt;&lt;/p&gt;
&lt;p&gt;Чтобы было проще ответить, мы можем немного изменить вопрос: какое событие из списка было бы наиболее значимо для пользователя? Я полагаю, что хороший ответ — ближайшее предстоящее мероприятие &lt;strong&gt;DjangoCon Europe&lt;/strong&gt;. Круто, покажем его первым. Какое событие второе по значимости? Ну, учитывая, что &lt;strong&gt;PyCamp Argentina&lt;/strong&gt; и &lt;strong&gt;PyCon Brasil&lt;/strong&gt; давно прошли, то хорошим выбором была бы конференция &lt;strong&gt;PyCon US&lt;/strong&gt;. У нас осталось два прошедших события, какое из них должно идти следующим? По моему личному мнению, самые недавние события должны быть первыми, чем старее событие, тем оно менее важно. Итак, вот какой порядок мы придумали в итоге:&lt;/p&gt;
&lt;p&gt;&lt;img alt="лучший порядок событий" src="https://asyncee.github.io/public/posts/advanced-django-querying/best.png"&gt;&lt;/p&gt;
&lt;p&gt;Давайте взглянем поближе, что мы сделали. Сначала идут предстоящие события, упорядоченные хронологически (т.е. по порядку наступления), а затем прошедшие события, упорядоченные в обратном хронологическом порядке. Странно.&lt;/p&gt;
&lt;p&gt;&lt;img alt="хронологические направления" src="https://asyncee.github.io/public/posts/advanced-django-querying/chronological_directions.png"&gt;&lt;/p&gt;
&lt;p&gt;Хорошо, и как нам теперь построить запрос в базу данных, чтобы отобразить эти события во вьюхе Django?&lt;/p&gt;
&lt;h3&gt;Простой подход&lt;/h3&gt;
&lt;p&gt;Простым решением было бы написать два отдельных запроса и соединить результаты. Вот, как это могло бы выглядеть:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;upcoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__gte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__lt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-date'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upcoming&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Главная проблема здесь то, что выполняя эти два запроса, мы извлекаем ВСЕ события из базы. Это станет проблемой, как только у нас появится много событий. Обычным решением является разбиение на страницы, но в данном случае пагинация не поможет. Нам всегда придётся выполнить оба запроса заранее, чтобы составить из них единый список, и только потом сделать срез (slice) списка для формирования страницы.&lt;/p&gt;
&lt;h3&gt;Правильный подход&lt;/h3&gt;
&lt;p&gt;Нам нужен способ вернуть события в правильном порядке за один запрос. Чтобы этого достигнуть, нам нужно использовать более продвинутые возможности Django ORM. Мы разобьём решение на две части. В первой, мы отделим грядущие события от прошедших и заставим будущие события отображаться в начале списка.&lt;/p&gt;
&lt;p&gt;Мы воспользуемся операторами Django QuerySet &lt;code&gt;Case&lt;/code&gt; и &lt;code&gt;When&lt;/code&gt;. В этом посте я не затрону их подробно, так что, если вы не знаете как их использовать, рекомендую прочитать &lt;a href="https://micropyramid.com/blog/django-conditional-expression-in-queries/"&gt;этот блогпост&lt;/a&gt;. Также мы используем &lt;code&gt;annotations&lt;/code&gt;. (&lt;a href="https://docs.djangoproject.com/en/1.10/topics/db/aggregation/#generating-aggregates-for-each-item-in-a-queryset"&gt;читайте в документации Django&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Вот первая часть нашего запроса:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;relevance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__gte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__lt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;output_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'relevance'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Мы аннотируем предстоящие события релевантностью &lt;code&gt;relevance = 1&lt;/code&gt;и прошедшие &lt;code&gt;relevance = 2&lt;/code&gt;. Когда мы упорядочиваем запрос по релевантности, будущие события располагаются перед прошедшими:&lt;/p&gt;
&lt;p&gt;&lt;img alt="промежуточная сортировка" src="https://asyncee.github.io/public/posts/advanced-django-querying/intermediary.png"&gt;&lt;/p&gt;
&lt;p&gt;Выглядит неплохо, но мы ещё не закончили. Ближайшие события показываются в правильном порядке, а прошедшие в обратном. Вторая часть немного сложнее, так как предстоящие события идут в &lt;em&gt;порядке возрастания даты&lt;/em&gt;, а прошедшие — &lt;em&gt;в порядке убывания&lt;/em&gt;. Решение такое — аннотировать разницу во времени между текущей датой и датой события.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;relevance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__gte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__lt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;output_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;timediff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__gte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date__lt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="n"&gt;output_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DurationField&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'relevance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'timediff'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Обратите внимание, что предстоящие события аннотированы как &lt;code&gt;дата события - текущая дата&lt;/code&gt;, а прошедшие как &lt;code&gt;текущая дата - дата события&lt;/code&gt;. Когда мы используем поле &lt;code&gt;timediff&lt;/code&gt; как второй параметр сортировки &lt;code&gt;order_by&lt;/code&gt;, то предстоящие события будут возвращены в хронологическом порядке, а прошедшие — в обратном хронологическом порядке.&lt;/p&gt;
&lt;p&gt;Ура! Миссия выполнена, теперь мы можем получить все события в правильном порядке за один запрос в базу данных. К нему может быть применена пагинация, а значит он будет хорошо масштабироваться.&lt;/p&gt;
&lt;p&gt;Эта статья является переводом статьи &lt;strong&gt;Filipe Ximenes&lt;/strong&gt; &lt;a href="https://www.vinta.com.br/blog/2017/advanced-django-querying-sorting-events-date/"&gt;Advanced Django querying: sorting events by date&lt;/a&gt;. Перевод размещён с разрешения автора.&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/advanced-django-querying-sorting-events-by-date/</guid><pubDate>Tue, 14 Mar 2017 20:00:00 GMT</pubDate></item><item><title>Git: как сделать push в несколько репозиториев одновременно</title><link>https://asyncee.github.io/posts/how-to-push-to-multiple-git-remotes/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;Понадобилось мне залить код одновременно в несколько репозиториев. Один репо лежит в &lt;em&gt;Dropbox&lt;/em&gt;, второй в &lt;em&gt;Gitlab&lt;/em&gt;. В обоих хранится один и тот же код проекта.&lt;/p&gt;
&lt;p&gt;Решить эту задачу можно очень просто — &lt;em&gt;Git&lt;/em&gt; ультракрут и имеет красивое решение из коробки — нужно создать новый remote и указать для него адреса репозиториев, куда будет заливаться код.&lt;/p&gt;
&lt;p&gt;Сделать это можно двумя способами — из консоли, с помощью команд &lt;em&gt;Git&lt;/em&gt;, и вручную отредактировав файл &lt;code&gt;.git/config&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Итак, вот, что нужно сделать:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Создать новый remote&lt;/span&gt;
git remote add all user@host:repo.git

&lt;span class="c1"&gt;# Настроить адреса репозиториев&lt;/span&gt;
git remote set-url --add --push all user@host:repo.git
git remote set-url --add --push all /home/user/Dropbox/repo.git
&lt;/pre&gt;


&lt;p&gt;Готово. Теперь можно залить все изменения в оба репозитория одновременно с помощью команды&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git push all
&lt;/pre&gt;


&lt;p&gt;Просто и удобно. Конфигурационный файл &lt;code&gt;.git/config&lt;/code&gt; в итоге будет иметь такой вид:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Стандартное содержимое разделов core и remote "origin" опущено&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;remote &lt;span class="s2"&gt;"all"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="nv"&gt;pushurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; user@host:repo.git
   &lt;span class="nv"&gt;pushurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/user/Dropbox/repo.git
&lt;/pre&gt;


&lt;p&gt;Я предпочитаю редактировать &lt;code&gt;.git/config&lt;/code&gt; напрямую. Информация актуальна для Git 2.7.&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/how-to-push-to-multiple-git-remotes/</guid><pubDate>Sun, 12 Mar 2017 20:00:00 GMT</pubDate></item><item><title>Как настроить flake8 для работы в Pycharm 2016.3</title><link>https://asyncee.github.io/posts/how-to-configure-flake-8-with-pycharm-2016-3/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;Потребовалось мне настроить &lt;em&gt;flake8&lt;/em&gt; в &lt;em&gt;Pycharm&lt;/em&gt; таким образом, чтобы проверялся весь проект сразу и по итогу запуска выдавались кликабельные результаты в консоли — щёлкнул на проблемный файл и сразу перешёл на нужное место.&lt;/p&gt;
&lt;p&gt;В интернете есть много примеров конфигурации, но ни одного работающего из коробки я не нашёл, поэтому публикую своё решение.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Открываем проект&lt;/li&gt;
&lt;li&gt;Идём в меню &lt;em&gt;File&lt;/em&gt; → &lt;em&gt;Settings&lt;/em&gt;, либо нажимаем &lt;code&gt;Ctrl + Alt + S&lt;/code&gt; (в Linux).&lt;/li&gt;
&lt;li&gt;Переходим в &lt;em&gt;Tools&lt;/em&gt; → &lt;em&gt;External tools&lt;/em&gt; и нажимаем на +, чтобы добавить новую запись.&lt;/li&gt;
&lt;li&gt;Заполняем форму как на скриншоте ниже:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="https://asyncee.github.io/public/posts/pycharm-flake8.png"&gt;&lt;/p&gt;
&lt;p&gt;Обратите внимание, что для вашего проекта, возможно, потребуется по−другому заполнить поля &lt;em&gt;Parameters&lt;/em&gt; и &lt;em&gt;Working directory&lt;/em&gt;. В моём случае всё заработало именно в такой конфигурации.&lt;/p&gt;
&lt;p&gt;{:start="5"}
5. Нажимаем кнопку &lt;em&gt;Output filters&lt;/em&gt; и далее добавляем новый фильтр, который будет парсить результаты выдачи &lt;em&gt;Flake 8&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Настройка фильтров" src="https://asyncee.github.io/public/posts/pycharm-flake8-filters.png"&gt;&lt;/p&gt;
&lt;p&gt;Под Linux есть такой вот баг, с обрезанием поля ввода, поэтому дублирую:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$FILE_PATH$\:$LINE$\:$COLUMN$\:.*
&lt;/pre&gt;


&lt;p&gt;В итоге, после запуска &lt;em&gt;Flake 8&lt;/em&gt; (из меню &lt;em&gt;Tools&lt;/em&gt; → &lt;em&gt;External tools&lt;/em&gt;) будет такой результат:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Кликабельные результаты" src="https://asyncee.github.io/public/posts/pycharm-flake8-results.png"&gt;&lt;/p&gt;
&lt;p&gt;Изображение взято &lt;a href="https://habrahabr.ru/company/dataart/blog/318776/"&gt;отсюда&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/how-to-configure-flake-8-with-pycharm-2016-3/</guid><pubDate>Fri, 10 Mar 2017 20:00:00 GMT</pubDate></item><item><title>Великолепный Python 3</title><link>https://asyncee.github.io/posts/gorgeous-python-3/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;В этой стате я опишу возможности Python 3,  которые облегчают жизнь разработчика. Доработок в новой версии языка действительно много, поэтому я опишу только наиболее заметные изменения. Я пишу код на python каждый день, и ежедневное использование этих возможностей приносит мне большое удовольствие. Итак, поехали!&lt;/p&gt;
&lt;h3&gt;print теперь функция, а не оператор&lt;/h3&gt;
&lt;p&gt;Да, теперь &lt;code&gt;print&lt;/code&gt; это функция, а не оператор, так что теперь необходимо использовать скобки: &lt;code&gt;print("string")&lt;/code&gt;.  Сигнатура функции такая:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3/library/functions.html#print"&gt;Подробнее в документации.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;unicode по−умолчанию&lt;/h3&gt;
&lt;p&gt;Теперь все строки в &lt;strong&gt;Unicode&lt;/strong&gt; по−умолчанию, а кодировка, конечно−же, &lt;strong&gt;utf-8&lt;/strong&gt;. Искренне рад этому изменению, так как можно навсегда забыть про литерал &lt;code&gt;u""&lt;/code&gt; и писать более чистый код.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit"&gt;Документация по изменениям str vs unicode.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3120/"&gt;Документация по utf-8 кодировке по−умолчанию (PEP-3120).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Числовой тип по−умолчанию — int&lt;/h3&gt;
&lt;p&gt;Да, теперь число при выполнении различных операций не может поменять свой тип и стать &lt;code&gt;long&lt;/code&gt;, например. По−факту, &lt;code&gt;long&lt;/code&gt; из Python 2 просто переименовали в &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0237/"&gt;Документация (PEP-237).&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Распаковка&lt;/h3&gt;
&lt;p&gt;В PEP-448 определены дополнительные возможности для использования операторов распаковки итератора и словаря (&lt;code&gt;*&lt;/code&gt; и &lt;code&gt;**&lt;/code&gt;). Их можно использовать произвольное количество раз, например:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dict_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dict_b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Так что можно обойтись без &lt;code&gt;dict.update(another_dict)&lt;/code&gt;. Работает, начиная с &lt;strong&gt;Python 3.5&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ещё одно замечательное изменение в языке — расширенная распаковка. Теперь можно указать переменную, в которую будут помещены все элементы, не указанные явно. Проще пояснить на примере:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Как видно, в переменную &lt;code&gt;other&lt;/code&gt; попали все элементы, кроме первого и последнего.&lt;/p&gt;
&lt;p&gt;Код стал более чистым (пример из документации):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# было&lt;/span&gt;
&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

&lt;span class="c1"&gt;# стало&lt;/span&gt;
&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0448/"&gt;Документация (PEP-448).&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3132/"&gt;Документация (PEP-3132).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Настоящее деление&lt;/h3&gt;
&lt;p&gt;Наконец−то в Python 3 догадались реализовать настоящее деление. Ранее деление было неочевидным — для &lt;code&gt;int&lt;/code&gt; и &lt;code&gt;long&lt;/code&gt; возвращалась целая часть, а для &lt;code&gt;float&lt;/code&gt; — приблизительный результат деления:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;7.0&lt;/span&gt;
&lt;span class="mf"&gt;1.7142857142857142&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Разумеется такое поведение по−умолчанию приводило к ошибкам в работе программ, когда на вход подавалось целое число (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;) вместо дробного. Теперь эту ситуацию исправили и деление с помощью оператора &lt;code&gt;/&lt;/code&gt; возвращает ожидаемый результат.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0238/"&gt;Документация (PEP-238).&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Только ключевые аргументы&lt;/h3&gt;
&lt;p&gt;PEP-3102 определяет новый вид аргументов, которые могут быть переданы в функцию только по отдельному ключевому слову, но не через позиционный параметр. Суть в том, что ранее нельзя было определить аргументы переменной длины (&lt;code&gt;*args&lt;/code&gt;), а за ними какие−то ключевые аргументы. Это было синтаксической ошибкой. Чтобы её обойти, приходилось определять сигнатуру функции как&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;и получать ключевые аргументы уже оттуда, например как &lt;code&gt;x = kwargs.get('x')&lt;/code&gt;. Теперь эта проблема решена и доступна вот такая запись:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;То есть Python 3 позволяет писать более чистый код на уровне синтаксиса языка.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-3102/"&gt;Документация (PEP-3102).&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Форматируемые строковые литералы&lt;/h3&gt;
&lt;p&gt;С момента релиза &lt;strong&gt;Python 3.6&lt;/strong&gt;, эту тему уже успели раскрыть во множестве изданий, поэтому подробно останавливаться на ней не буду. Суть в том, что строки можно форматировать, определяя подстановки в самой строке и работать это будет точно так же, как если был вызван метод &lt;code&gt;format&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Fred"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"He said his name is {name}."&lt;/span&gt;
&lt;span class="s1"&gt;'He said his name is Fred.'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;precision&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decimal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"12.34567"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"result: {value:{width}.{precision}}"&lt;/span&gt;  &lt;span class="c1"&gt;# nested fields&lt;/span&gt;
&lt;span class="s1"&gt;'result:      12.35'&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;Документация (PEP-498).&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Подчёркивания в числах&lt;/h3&gt;
&lt;p&gt;Возможно эта возможность в языке совсем и незначительная, но мне она очень нравится, так как теперь можно приводить большие числа в более читаемый вид:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# было&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;

&lt;span class="c1"&gt;# стало&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_000_000&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0515/"&gt;Документация (PEP-515).&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Новая реализация словарей&lt;/h3&gt;
&lt;p&gt;Начиная с &lt;strong&gt;Python 3.6&lt;/strong&gt; появилась новая реализация словарей, которая уменьшает объём потребляемой памяти на 20-25% по сравнению с версией 3.5.&lt;/p&gt;
&lt;p&gt;Так же реализация словаря в &lt;em&gt;Python 3.6&lt;/em&gt; сохраняет порядок атрибутов, но это всего лишь деталь реализации интерпретатора &lt;em&gt;CPython&lt;/em&gt;. То есть, в &lt;em&gt;Pypy&lt;/em&gt; или любой другой версии интерпретатора словарь может быть не упорядоченным, что приведёт к ошибкам в программе.&lt;/p&gt;
&lt;p&gt;Однако теперь гарантируется сохранение порядка определения атрибутов, а так же порядок элементов в &lt;code&gt;**kwargs&lt;/code&gt; соответствует порядку, в котором эти элементы переданы в функцию.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/whatsnew/3.6.html#pep-520-preserving-class-attribute-definition-order"&gt;Подробнее в документации.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Возможность модификации подкласса без использования метаклассов&lt;/h3&gt;
&lt;p&gt;Появилась возможность писать классы, которые изменяют поведение своих подклассов. По сути, этот функционал похож на написание декоратора класса, с тем отличием, что влияет он на все будущие подклассы, а не на один конкретный класс. Суть в том, что какие−то простые вещи, такие как, реестр подклассов, теперь можно реализовать без использования метаклассов.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PluginBase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init_subclass__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_plugins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init_subclass__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_known_plugins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Plugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foo_plugin"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;В данном примере, при инициализации подкласса &lt;code&gt;FooPlugin&lt;/code&gt;, выполняется метод &lt;code&gt;__init_subclass__&lt;/code&gt;. Переменная &lt;code&gt;cls&lt;/code&gt; указывает на сам инициализируемый подкласс. Далее информация о новом подклассе записывается в переменную &lt;code&gt;_plugins&lt;/code&gt; базового класса (см. &lt;a href="https://docs.python.org/3.6/reference/datamodel.html"&gt;Python Data Model&lt;/a&gt; / method resolution order). Ну, и обратите внимание, что при инициализации подкласса на его поведение можно влиять с помощью параметров &lt;code&gt;**kwargs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#class-customization"&gt;Документация.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Заключение&lt;/h3&gt;
&lt;p&gt;На самом деле в Python есть огромное количество других нововведений и улучшений, но в данной статье я перечислил только самые важные для меня. За кадром остались &lt;code&gt;type hints&lt;/code&gt;, &lt;code&gt;new style classes&lt;/code&gt;, улучшения в поддержке асинхронного программирования и много чего ещё. Для ознакомления с ними рекомендую почитать &lt;a href="https://docs.python.org/3/whatsnew/"&gt;What's new in Python&lt;/a&gt;, там действительно много интересного.&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/gorgeous-python-3/</guid><pubDate>Thu, 02 Mar 2017 20:00:00 GMT</pubDate></item><item><title>Про Lektor</title><link>https://asyncee.github.io/posts/moving-to-jekyll/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;Так совпало, что, когда я решил вести блог, релизнулся &lt;a href="https://www.getlektor.com/"&gt;Lektor&lt;/a&gt;  от Армина. Судя по документации всё выглядело очень вкусно — встроенная админка для редактирования постов, расширяемая модель данных, позволяющая создать ресурс с гибкой структурой, поддержка плагинов и так далее. Да и автор такой именитый — сам Армин Ронахер, автор Flask, и тонны других полезных и действительно качественных инструментов (да, это противоречивое высказывание, но, допустим, что это так).&lt;/p&gt;
&lt;p&gt;Что ж, так как я пишу на Python, то грех было не попробовать. В сторону альтернатив я особо не смотрел — конечно, я знал про &lt;code&gt;Pelican&lt;/code&gt;, &lt;code&gt;Jekyll&lt;/code&gt;  и кучу других инструментов, но пробовать каждый из них небыло ни желания, ни времени, ведь передо мной был &lt;code&gt;Lektor&lt;/code&gt;. Что я сделал — изучил документацию, прочитал отзывы в сообществе — в целом инструмент для создания статичных сайтов был принят любьми очень позитивно.&lt;/p&gt;
&lt;p&gt;Я описал модель данных (посты, категории, и прочее), адаптировал стороннюю тему (изрядно её переработав, благо, лицензия позволяла). Стал вести блог, написал первый пост, за ним второй, третий и так далее.&lt;/p&gt;
&lt;p&gt;По мере написания постов, я всё больше и больше сталкивался с различными проблемами и недоработками, начиная от несовершенства админки (чёрт, да это же просто поле для ввода текста без какого−либо WISYWIG — да любой &lt;code&gt;vim&lt;/code&gt; справляется лучше) и заканчивая корявой работой сторонних плагинов. Да, по поводу плагинов у меня вопросов нет — проект молодой, плагины сторонние, разумно ожидать от них нестабильной работы и багов. Вот только в сообществе не нашлось людей, желавших заниматься поддержкой этих самых плагинов. Да и сам проект развивался очень медленно, вяло. Казалось, что Армин потерял интерес и забил.&lt;/p&gt;
&lt;p&gt;С того момента прошло достаточное количество времени, и я могу сказать, что &lt;code&gt;Lektor&lt;/code&gt; не стал лучше. Да, я согласен, что это &lt;em&gt;Open Source&lt;/em&gt;, тут никто никому не должен. Хочешь чего−то — форкай, дорабатывай, вливай изменения в проект. &lt;strong&gt;Однако&lt;/strong&gt;, я считаю, что этот случай отдельный. Почему? Да всё просто — Армин Ронахер достаточно известный разработчик, к нему есть доверие сообщества, и вполне ожидаемо было предположить, что &lt;code&gt;Lektor&lt;/code&gt; выстрелит, получит поддержку сообщества, будет развиваться. Однако, насколько я вижу — основные запросы сообщества так и не удовлетворены — нет хорошего редактора, реестра плагинов, проблемы с разработкой &lt;em&gt;frontend  (sass, webpack, etc)&lt;/em&gt;, низкая производительность в отдельных ситуациях и так далее. Проблем куча и они не решаются.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Но это же обычная ситуация в мире открытого программного обеспечения!&lt;/strong&gt; — можете сказать вы. Да, соглашусь. Однако, на мой взгляд, правилом хорошего тона является прозрачность намерений. Любой автор такого большого проекта так или иначе должен пояснить свою позицию, доказать, что его проект это не просто очередной &lt;strong&gt;side project just for fun&lt;/strong&gt;, но целостное начинание, которым можно пользоваться, жить с ним и развиваться вместе. Если у автора нет возможностей для поддержки проекта — все мы люди — то, зачастую можно увидеть надпись &lt;em&gt;developers wanted&lt;/em&gt;, и так далее. Прозрачность намерений. Это банально может быть roadmap, либо описание видения проекта, поддержка или использование проекта какой−либо компанией и так далее. Последний коммит армина был &lt;em&gt;4 августа 2016&lt;/em&gt; года (ветка master) — почти 7 месяцев назад.&lt;/p&gt;
&lt;p&gt;Поймите мой посыл — я не говорю, что тот или иной разработчик плохой. Я не говорю, что проект плохой. Нет. Я говорю о том, что &lt;em&gt;на фоне известности автора и без чётко обозначенной позиции по разработке проекта&lt;/em&gt; можно легко ошибиться и принять неправильное решение. Разумеется, это &lt;strong&gt;моя&lt;/strong&gt; ошибка, и расплачиваться за неё мне — своим временем на перевод проекта на другую систему публикации.&lt;/p&gt;
&lt;h3&gt;Welcome, Jekyll&lt;/h3&gt;
&lt;p&gt;Как вы уже поняли, я решил шагнуть в неизвестный мне до этого мир &lt;code&gt;Ruby&lt;/code&gt;. На изучение &lt;code&gt;Jekyll&lt;/code&gt;, инфраструктуры организации проектов, плагинов, сборки проекта локально + удалённо на стороне &lt;code&gt;GitHub&lt;/code&gt; у меня ушло всего несколько часов. И вот, спустя, ещё четыре часа, мой блог уже &lt;code&gt;up and running&lt;/code&gt; — статьи я вручную перенёс из &lt;code&gt;Lektor&lt;/code&gt; (правил прямо в &lt;code&gt;vim&lt;/code&gt;), натянул уже готовую тему &lt;code&gt;Hyde&lt;/code&gt; (которую, конечно, доработал напильником — все «кишки» темы лежат прямо в проекте и это очень круто).&lt;/p&gt;
&lt;p&gt;Что меня особенно радует — большое количество готовых решений (плагинов) и простота их интеграции. Хочешь &lt;code&gt;assets pipeline&lt;/code&gt;? Пожалуйста! Хочешь кастомную тему — без проблем, в интернете их сотни. Не можешь определиться, где лучше разместить блог на &lt;code&gt;Jekyll&lt;/code&gt; онлайн? Без проблем — на любой вкус найдутся готовые решения и инструкции (имеются ввиду такие фичи как поддержка автосборки проекта гитхабом, размещение и автосборка у &lt;code&gt;Digital Ocean&lt;/code&gt;, и т.п.).&lt;/p&gt;
&lt;p&gt;Думаю, что это очевидно, что сравнивать &lt;code&gt;Lektor&lt;/code&gt; и &lt;code&gt;Jekyll&lt;/code&gt; нет смысла — это совершенно разные проекты по уровню и инвестициям, ставить их в один ряд было бы некорректно.&lt;/p&gt;
&lt;p&gt;Ну и в завершение прикреплю скрин редактора, в котором я пишу этот текст — вполне себе приятный &lt;em&gt;markdown wisywig&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Скриншот jekyll-admin" src="https://asyncee.github.io/public/posts/jekyll-admin-screenshot.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;В завершение&lt;/h3&gt;
&lt;p&gt;Ну что ж, вот такой вышел противоречивый пост. Так или иначе негативный опыт — это тоже опыт, а без него я бы не пользовался сейчас благами &lt;code&gt;Jekyll&lt;/code&gt; с его великолепным набором плагинов. Писать посты стало удобнее, думаю, что это добавит мотивации писать ещё.&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/moving-to-jekyll/</guid><pubDate>Fri, 24 Feb 2017 20:00:00 GMT</pubDate></item><item><title>Django, webpack, bower и gulp</title><link>https://asyncee.github.io/posts/django-webpack-bower-i-gulp/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;В наше время сборка фронтенда становится актуальным и всё более интересным вопросом. Если раньше собирать особо ничего и не требовалось, так как проекты состояли лишь из набора стилей и скриптов, то сейчас, с развитием javascript, появляется всё больше возможностей и интересных технологий.&lt;/p&gt;
&lt;p&gt;Фронтенд меняется, а вместе с ним должны меняться и мы.&lt;/p&gt;
&lt;p&gt;В качестве демонстрационного проекта буду рассматривать мой шаблон &lt;a href="https://github.com/asyncee/django-project-template"&gt;проекта для Django&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Итак, у нас в проекте используются технологии:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;стили в scss, с трансляцией в css&lt;/li&gt;
&lt;li&gt;скрипты на javascript (ES2015, ES7, JSX), с трансляцией в ES5&lt;/li&gt;
&lt;li&gt;для сборки скриптов (и стилей) в бандл используется &lt;strong&gt;webpack&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;для установки зависимостей для сборки проекта используется &lt;strong&gt;npm&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;для установки библиотек от вендоров (статика) — &lt;strong&gt;bower&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;для задач по сборке фронтенда используется &lt;strong&gt;gulp&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;gulpfile использует синтаксис ES2015 и требует Node 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Полезные ссылки&lt;/h3&gt;
&lt;p&gt;Привожу все ссылки на исходники вначале статьи, так как дальше кода не будет, а будет общее описание подхода.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;описываемый &lt;a href="https://github.com/asyncee/django-project-template"&gt;шаблон проекта&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asyncee/django-project-template/blob/master/gulpfile.js"&gt;gulpfile.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asyncee/django-project-template/blob/master/webpack.config.js"&gt;конфиг webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asyncee/django-project-template/blob/master/package.json"&gt;описание frontend-зависимостей&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Структура директорий&lt;/h3&gt;
&lt;p&gt;Приведу частичную структуру директорий, касающуюся только фронтенда.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;.
├── assets
│   ├── js
│   │   └── index.js
│   └── sass
│       └── index.scss
├── .bowerrc
├── bower.json
├── gulpfile.js
├── package.json
├── src
│   ├── manage.py
│   ├── project_name
│   │   ├── __init__.py
│   │   ├── static
│   │   │   ├── build
│   │   │   ├── css
│   │   │   ├── vendor
│   │   │   ├── img
│   │   │   └── js
│   │   ├── templates
│   │   ├── urls.py
│   │   └── views.py
└── webpack.config.js
&lt;/pre&gt;


&lt;p&gt;Итак, как видно у нас две основные директории — &lt;code&gt;src&lt;/code&gt; с исходниками приложения (бэкенда) и &lt;code&gt;assets&lt;/code&gt; с исходниками графического интерфейса (фронтенд).&lt;/p&gt;
&lt;p&gt;Преобразованные исходные файлы собираются в бандлы и кладутся в директорию проекта &lt;code&gt;project_name/static/build&lt;/code&gt;, откуда и подключаются. Таким образом сборка прозрачно интегрируется с подсистемой статических файлов Django (&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Зависимости проекта&lt;/h3&gt;
&lt;p&gt;Все зависимости для сборки проекта описаны в файле &lt;code&gt;package.json&lt;/code&gt;. При развёртывании они устанавливаются с помощью команды &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Также используется bower для управления статикой, а конкретно для удобной установки и обновления библиотек. Все либы ставятся в &lt;code&gt;project_name/static/vendor/&lt;/code&gt; и &lt;strong&gt;коммитятся&lt;/strong&gt; в репозиторий.&lt;/p&gt;
&lt;h3&gt;Стили&lt;/h3&gt;
&lt;p&gt;Стили лежат в директории &lt;code&gt;assets/scss&lt;/code&gt; и импортируются в файл &lt;code&gt;index.scss&lt;/code&gt;. Сборка происходит с помощью тасков в gulp: &lt;code&gt;sass:dev&lt;/code&gt; и &lt;code&gt;sass:prod&lt;/code&gt;. В область видимости sass добавлена директория &lt;code&gt;node_modules&lt;/code&gt;, так что исходники их сторонних пакетов можно импортировать прямо оттуда.&lt;/p&gt;
&lt;p&gt;Пример подключения &lt;em&gt;bootstrap-sass&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ cat assets/sass/index.scss

@import &lt;span class="s2"&gt;"bootstrap-sass/assets/stylesheets/bootstrap"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Для дополнительного удобства разработки, в gulp подключен Browsersync, так что менять стилевое оформление можно прямо «на ходу». Разумеется, всё запускается автоматически, одной командой, но об этом позже.&lt;/p&gt;
&lt;h3&gt;Скрипты&lt;/h3&gt;
&lt;p&gt;Скрипты лежат соответственно в &lt;code&gt;assets/js&lt;/code&gt; и подключаются в &lt;code&gt;index.js&lt;/code&gt;. Сборка происходит с помощью &lt;code&gt;webpack&lt;/code&gt;. Кстати сборщик умеет автоматически подключать нужные стили прямо в runtime (аттачит их в head страницы).&lt;/p&gt;
&lt;p&gt;Поддерживается синтаксис ES2015 с фичами из ES7, а также JSX. За транспайлинг отвечает babel.&lt;/p&gt;
&lt;h3&gt;Задачи для сборки проекта&lt;/h3&gt;
&lt;p&gt;Для сборки проекта используется два типа задач — сборка в продакшн и девелопмент-сборка. Отличие сборок заключается в том, что для боевой сборки мы используем минификацию и прочие оптимизации, а для локальной — нет. На скорости это тоже отражается, так как пересборка изменений происходит на лету, при изменении исходных файлов — за этим следит gulp.&lt;/p&gt;
&lt;p&gt;Вот список наших задач:
- &lt;code&gt;js:dev&lt;/code&gt; и &lt;code&gt;js:prod&lt;/code&gt; — сборка яваскрипта
- &lt;code&gt;sass:dev&lt;/code&gt; и &lt;code&gt;sass:prod&lt;/code&gt; — сборка стилей
- &lt;code&gt;django-runserver&lt;/code&gt; — запуск сервера django
- &lt;code&gt;browser-sync&lt;/code&gt; — запуск сервера browsersync
- &lt;code&gt;watch&lt;/code&gt; — слежение за изменёнными исходниками и запуск пересборки. Отслеживаются &lt;em&gt;только&lt;/em&gt; стили, так как javascript сжимается вебпаком, который работает в режиме наблюдения (watch). Такое разделение обусловлено тем, что вебпак знает как эффективнее пересобрать изменившийся файл.
- &lt;code&gt;default&lt;/code&gt; — запуск сборки стилей, скриптов, сервера django, browsersync и слежения за изменениями. Команды запускаются для сборки разрабатываемой версии.
- &lt;code&gt;deploy&lt;/code&gt; — сборка стилей и скриптов в режиме для продакшена.&lt;/p&gt;
&lt;h3&gt;Интеграция django и gulp&lt;/h3&gt;
&lt;p&gt;Ребята из CaktusGroup в своём блоге &lt;a href="https://www.caktusgroup.com/blog/2016/05/02/es6-django-lovers/"&gt;описали&lt;/a&gt; опыт по интеграции сборки ассетов в Django−проекте. Вместо того, чтобы привязываться к конкретным инструментам Django (pipeline или compressor), они решили инвертировать процесс — и научили gulp запускать Django-проект (runserver) вместе с другими задачами.&lt;/p&gt;
&lt;p&gt;Этот подход реализован и у нас, и, должен сказать — работает превосходно. Для того, чтобы приступить к полноценной разработке, достаточно одной команды — &lt;code&gt;gulp&lt;/code&gt;. Всё запустится автоматически и будет готово к работе через несколько секунд. А благодаря Browsersync ещё и вкладка с сайтом откроется в браузере автоматически :)&lt;/p&gt;
&lt;p&gt;Единственный нюанс в том, чтобы настроить работу Browsersync на порту 8000, а Django запускать на другом, например, 3000 и проксировать запросы от первого ко второму. Тогда для разработчика вообще всё будет прозрачно.&lt;/p&gt;
&lt;h3&gt;Итого&lt;/h3&gt;
&lt;p&gt;Данный подход позволяет нам ускорить процесс разработки и сделать его более удобным. Отсутствие ограничений в выборе используемых технологий и настройке сборки позволяет максимально гибко подстраиваться под меняющиеся реалии веб-разработки.&lt;/p&gt;
&lt;p&gt;Одно могу сказать точно — пока в Django не появится крутой asset pipeline, мы будем использовать описанный в статье подход к разработке фронтенда.&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/django-webpack-bower-i-gulp/</guid><pubDate>Sun, 15 May 2016 20:00:00 GMT</pubDate></item><item><title>Как сохранить файл, доступный по ссылке в поле модели Django</title><link>https://asyncee.github.io/posts/kak-zagruzit-i-sohranit-fajl-iz-interneta-v-pole-modeli-django/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;Для решения этой задачи можно использовать разные способы, в том числе с загрузкой в оперативную память, но я предпочитаю сначала сохранить файл на жёсткий диск, а затем передать его на обработку в Django.&lt;/p&gt;
&lt;p&gt;Код простой:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.files.temp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.fields.files&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FieldFile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_file_from_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;save_to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Сохранить файл, доступный по адресу ``url`` в поле ``save_to`` модели ``model``.&lt;/span&gt;

&lt;span class="sd"&gt;    Аргументы:&lt;/span&gt;
&lt;span class="sd"&gt;        model — объект класса Model, либо FieldFile / ImageFieldFile&lt;/span&gt;
&lt;span class="sd"&gt;        url — ссылка на файл&lt;/span&gt;
&lt;span class="sd"&gt;        save_to — название файлового поля&lt;/span&gt;
&lt;span class="sd"&gt;        filename — новое имя для сохраняемого файла&lt;/span&gt;

&lt;span class="sd"&gt;    Примеры использования:&lt;/span&gt;
&lt;span class="sd"&gt;        save_file_from_url(gallery, '&amp;lt;url&amp;gt;', save_to='image')&lt;/span&gt;
&lt;span class="sd"&gt;        save_file_from_url(gallery.image, '&amp;lt;url&amp;gt;')&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FieldFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;'"model" argument should be a Model or FieldFile instance'&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FieldFile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'"save_to" argument must be provided along with Model instance'&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;save_to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;temp_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NamedTemporaryFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;temp_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;temp_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Вот ещё несколько примеров реализации:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://djangosnippets.org/snippets/2838/"&gt;django snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://asyncee.github.io/posts/kak-zagruzit-i-sohranit-fajl-iz-interneta-v-pole-modeli-django/Programmatically%20saving%20image%20to%20Django%20ImageField"&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Единственное, что стоит учесть — в данной реализации используется библиотека &lt;code&gt;requests&lt;/code&gt;, которая не умеет открывать локальные файлы (&lt;code&gt;file:///tmp/file.txt&lt;/code&gt;).&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/kak-zagruzit-i-sohranit-fajl-iz-interneta-v-pole-modeli-django/</guid><pubDate>Mon, 25 Apr 2016 20:00:00 GMT</pubDate></item><item><title>Установка postgresql в Ubuntu / Linux Mint</title><link>https://asyncee.github.io/posts/ustanovka-postgresql-v-ubuntu-linut-mint/</link><dc:creator>Stanislav Lobanov</dc:creator><description>&lt;div&gt;&lt;p&gt;Во всех моих проектах используется &lt;strong&gt;Postgresql&lt;/strong&gt; и каждый раз, когда необходимо её установить на чистую машину, приходится восстанавливать процесс установки.&lt;/p&gt;
&lt;p&gt;Чтобы эту проблему решить, документирую процесс здесь.&lt;/p&gt;
&lt;h3&gt;Установка&lt;/h3&gt;
&lt;p&gt;На данный момент я предпочитаю устанавливать самую свежую стабильную версию postgres из официального репозитория:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ sudo sh -c &lt;span class="s1"&gt;'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" &amp;gt;&amp;gt; /etc/apt/sources.list.d/pgdg.list'&lt;/span&gt;
$ wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;/pre&gt;


&lt;p&gt;Перед установкой я рекомендую выставить локаль &lt;code&gt;ru_RU.UTF-8&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ru_RU.UTF-8
sudo apt-get update
sudo apt-get install postgresql postgresql-contrib
&lt;/pre&gt;


&lt;h3&gt;Пересоздание кластера&lt;/h3&gt;
&lt;p&gt;Для того, чтобы решить проблемы с упорядочиванием и фильтрацией кириллических строк, необходимо пересоздать кластер БД сразу после установки с корректными значениями локали и кодировки:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ВНИМАНИЕ!&lt;/strong&gt; Приведённые ниже команды полностью удалят ваш текущий кластер со всеми данными:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;pg_dropcluster &lt;span class="m"&gt;9&lt;/span&gt;.5 main --stop
pg_createcluster --locale&lt;span class="o"&gt;=&lt;/span&gt;ru_RU.UTF-8 --encoding&lt;span class="o"&gt;=&lt;/span&gt;UTF-8 --start &lt;span class="m"&gt;9&lt;/span&gt;.5 main
&lt;/pre&gt;


&lt;p&gt;В данных командах версия &lt;strong&gt;postgresql&lt;/strong&gt; — &lt;code&gt;9.5&lt;/code&gt;, название кластера — &lt;code&gt;main&lt;/code&gt;. Готово, можно работать.&lt;/p&gt;
&lt;h3&gt;Альтернатива&lt;/h3&gt;
&lt;p&gt;В качестве альтернативы пересозданию кластера, можно вручную изменить кодировку шаблона &lt;code&gt;template0&lt;/code&gt;. Это будет работать только для новых баз данных.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# psql -U postgres&lt;/span&gt;

&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# update pg_database set datallowconn = TRUE where datname = 'template0';&lt;/span&gt;
UPDATE &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# \c template0&lt;/span&gt;
You are now connected to database &lt;span class="s2"&gt;"template0"&lt;/span&gt;.
&lt;span class="nv"&gt;template0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# update pg_database set datistemplate = FALSE where datname = 'template1';&lt;/span&gt;
UPDATE &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;template0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# drop database template1;&lt;/span&gt;
DROP DATABASE
&lt;span class="nv"&gt;template0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# create database template1 with template = template0 encoding = 'UTF8';&lt;/span&gt;
CREATE DATABASE
&lt;span class="nv"&gt;template0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# update pg_database set datistemplate = TRUE where datname = 'template1';&lt;/span&gt;
UPDATE &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;template0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# \c template1&lt;/span&gt;
You are now connected to database &lt;span class="s2"&gt;"template1"&lt;/span&gt;.
&lt;span class="nv"&gt;template1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# update pg_database set datallowconn = FALSE where datname = 'template0';&lt;/span&gt;
UPDATE &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Скрипт взят &lt;a href="https://gist.github.com/ffmike/877447"&gt;отсюда&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><guid>https://asyncee.github.io/posts/ustanovka-postgresql-v-ubuntu-linut-mint/</guid><pubDate>Sun, 17 Apr 2016 20:00:00 GMT</pubDate></item></channel></rss>